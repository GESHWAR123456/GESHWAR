{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5daa569e-57a0-4581-aada-64794af34668",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter Temperature in celsius: 120\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "248.0\n"
     ]
    }
   ],
   "source": [
    "C=float(input(\"Enter Temperature in celsius:\"))\n",
    "F = (C *9/5) + 32\n",
    "print(F)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "31da2b32-3fab-4c86-9d7f-a69a60b0b610",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Second largest element: 7\n"
     ]
    }
   ],
   "source": [
    "def second_largest(arr):\n",
    "    if len(arr) < 2:\n",
    "        return \"List has less than 2 elements\"\n",
    "\n",
    "    sorted_arr = sorted(arr, reverse=True)  # Sort the list in descending order\n",
    "    return sorted_arr[1]  # Second element is the second largest\n",
    "\n",
    "my_list = [3, 7, 1, 9, 4, 6, 2]\n",
    "print(\"Second largest element:\", second_largest(my_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "21e97987-dcb3-4129-bda9-721db0d5c7e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Occurrences of each element: {1: 4, 2: 3, 3: 2, 4: 1}\n"
     ]
    }
   ],
   "source": [
    "def count_occurrences(arr):\n",
    "    # Create an empty dictionary to store the counts\n",
    "    counts = {}\n",
    "\n",
    "    # Iterate through the list and update the counts\n",
    "    for elem in arr:\n",
    "        if elem in counts:\n",
    "            counts[elem] += 1\n",
    "        else:\n",
    "            counts[elem] = 1\n",
    "\n",
    "    return counts\n",
    "\n",
    "my_list = [1, 2, 3, 4, 1, 2, 3, 1, 2, 1]\n",
    "print(\"Occurrences of each element:\", count_occurrences(my_list))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "146659ce-04b7-4877-a668-e1f0a23851d7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
